"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.underline = exports.strikethrough = exports.spoiler = exports.pre = exports.mentionUser = exports.linkMessage = exports.link = exports.italic = exports.FormattedString = exports.fmt = exports.code = exports.bold = void 0;
class FormattedString {
    constructor(text, entities) {
        this.text = text;
        this.entities = entities;
    }
    toString() {
        return this.text;
    }
}
exports.FormattedString = FormattedString;
const unwrap = (stringLike) => {
    if (stringLike instanceof FormattedString) {
        return stringLike;
    }
    return new FormattedString(stringLike.toString(), []);
};
const buildFormatter = (type, ...formatArgKeys) => {
    return (stringLike, ...formatArgs) => {
        const formattedString = unwrap(stringLike);
        const formatArgObj = Object.fromEntries(formatArgKeys.map((formatArgKey, i) => [formatArgKey, formatArgs[i]]));
        return new FormattedString(formattedString.text, [{
                type,
                offset: 0,
                length: formattedString.text.length,
                ...formatArgObj,
            }, ...formattedString.entities]);
    };
};
// Native entity functions
const bold = buildFormatter("bold");
exports.bold = bold;
const code = buildFormatter("code");
exports.code = code;
const italic = buildFormatter("italic");
exports.italic = italic;
const link = buildFormatter("text_link", "url");
exports.link = link;
const pre = buildFormatter("pre", "language");
exports.pre = pre;
const spoiler = buildFormatter("spoiler");
exports.spoiler = spoiler;
const strikethrough = buildFormatter("strikethrough");
exports.strikethrough = strikethrough;
const underline = buildFormatter("underline");
exports.underline = underline;
// Utility functions
const mentionUser = (stringLike, userId) => {
    return link(stringLike, `tg://user?id=${userId}`);
};
exports.mentionUser = mentionUser;
const linkMessage = (stringLike, chatId, messageId) => {
    if (chatId > 0) {
        console.warn("linkMessage can only be used for supergroups and channel messages. Refusing to transform into link.");
        return stringLike;
    }
    else if (chatId < -1002147483647 || chatId > -1000000000000) {
        console.warn("linkMessage is not able to link messages whose chatIds are greater than -1000000000000 or less than -1002147483647 at this moment. Refusing to transform into link.");
        return stringLike;
    }
    else {
        return link(stringLike, `https://t.me/c/${(chatId + 1000000000000) * -1}/${messageId}`);
    }
};
exports.linkMessage = linkMessage;
// Root format function
const fmt = (rawStringParts, ...stringLikes) => {
    let text = rawStringParts[0];
    let entities = [];
    for (let i = 0; i < stringLikes.length; i++) {
        const stringLike = stringLikes[i];
        if (stringLike instanceof FormattedString) {
            entities.push(...stringLike.entities.map((e) => ({
                ...e,
                offset: e.offset + text.length,
            })));
        }
        text += stringLike.toString();
        text += rawStringParts[i + 1];
    }
    return new FormattedString(text, entities);
};
exports.fmt = fmt;
